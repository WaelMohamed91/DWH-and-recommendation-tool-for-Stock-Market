DECLARE
    t_seed NUMBER(20);
    
    -- FETCHING ALL COMPANY DATA FROM 2017
    CURSOR COMPANIES_2017 IS
    SELECT * FROM STOCK_YEARLY_STATS_FACT
    WHERE DATE_KEY = TO_DATE('31/12/2017', 'DD/MM/YYYY');
    
    CMP_IN_2014 NUMBER;
    V_AVG_PRICE NUMBER;		V_AVG_PRICE_PER_EARNINGS NUMBER;   
    V_AVG_DIVIDEND_YIELD NUMBER;	V_AVG_EARNINGS_PER_SHARE NUMBER;  
    V_AVG_WEEK_LOW_52 NUMBER;	V_AVG_WEEK_HIGH_52 NUMBER;
    V_AVG_MARKET_CAP NUMBER;	V_AVG_EBITDA NUMBER;
    V_AVG_PRICE_PER_SALES NUMBER;	V_AVG_PRICE_PER_BOOK NUMBER;

BEGIN
    -- SETTING RANDOM SEED
    SELECT TO_NUMBER(TO_CHAR(SYSDATE, 'MMDDHH24MISS'))
    INTO t_seed
    FROM Dual;
    DBMS_RANDOM.INITIALIZE(t_seed);
    
    FOR R_CMP IN COMPANIES_2017 LOOP
        -- CHECKING IF THERE IS DATA FOR THE COMPANY IN 2017
        SELECT COUNT(*)
        INTO CMP_IN_2014
        FROM STOCK_YEARLY_STATS_FACT
        WHERE COMPANY_KEY = R_CMP.COMPANY_KEY
        AND DATE_KEY = TO_DATE('31/12/2017', 'DD/MM/YYYY');
        
        IF CMP_IN_2014 = 1 THEN
            SELECT AVG(PRICE), AVG(PRICE_PER_EARNINGS), AVG(DIVIDEND_YIELD),          
            AVG(EARNINGS_PER_SHARE), AVG(WEEK_LOW_52), AVG(WEEK_HIGH_52),
            AVG(MARKET_CAP), AVG(EBITDA), AVG(PRICE_PER_SALES),
            AVG(PRICE_PER_BOOK)
            INTO V_AVG_PRICE, V_AVG_PRICE_PER_EARNINGS, 
            V_AVG_DIVIDEND_YIELD, V_AVG_EARNINGS_PER_SHARE, 
            V_AVG_WEEK_LOW_52, V_AVG_WEEK_HIGH_52, V_AVG_MARKET_CAP, 
            V_AVG_EBITDA, V_AVG_PRICE_PER_SALES, V_AVG_PRICE_PER_BOOK
            FROM STOCK_YEARLY_STATS_FACT
            WHERE COMPANY_KEY = R_CMP.COMPANY_KEY
            AND DATE_KEY IN (TO_DATE('31/12/2014', 'DD/MM/YYYY'), TO_DATE('31/12/2017', 'DD/MM/YYYY'));
            
            INSERT INTO STOCK_YEARLY_STATS_FACT
            VALUES(TO_DATE('31/12/2016', 'DD/MM/YYYY'),
                            R_CMP.COMPANY_KEY,
                            R_CMP.SECTOR_KEY,
                            ROUND(DBMS_RANDOM.VALUE(V_AVG_PRICE, R_CMP.PRICE),2),
                            ROUND(DBMS_RANDOM.VALUE(V_AVG_PRICE_PER_EARNINGS, R_CMP.PRICE_PER_EARNINGS),2),
                            ROUND(DBMS_RANDOM.VALUE(V_AVG_DIVIDEND_YIELD, R_CMP.DIVIDEND_YIELD),6),
                            ROUND(DBMS_RANDOM.VALUE(V_AVG_EARNINGS_PER_SHARE, R_CMP.EARNINGS_PER_SHARE),2),
                            ROUND(DBMS_RANDOM.VALUE(V_AVG_WEEK_LOW_52, R_CMP.WEEK_LOW_52),2),
                            ROUND(DBMS_RANDOM.VALUE(V_AVG_WEEK_HIGH_52, R_CMP.WEEK_HIGH_52),2),
                            TRUNC(DBMS_RANDOM.VALUE(V_AVG_MARKET_CAP, R_CMP.MARKET_CAP)),
                            TRUNC(DBMS_RANDOM.VALUE(V_AVG_EBITDA, R_CMP.EBITDA)),
                            ROUND(DBMS_RANDOM.VALUE(V_AVG_PRICE_PER_SALES, R_CMP.PRICE_PER_SALES),6),
                            ROUND(DBMS_RANDOM.VALUE(V_AVG_PRICE_PER_BOOK, R_CMP.PRICE_PER_BOOK),2));
        ELSE
            INSERT INTO STOCK_YEARLY_STATS_FACT
            VALUES(TO_DATE('31/12/2016', 'DD/MM/YYYY'),
                            R_CMP.COMPANY_KEY,
                            R_CMP.SECTOR_KEY,
                            ROUND(R_CMP.PRICE + DBMS_RANDOM.VALUE(-0.2, 0.2)*R_CMP.PRICE, 2),
                            ROUND(R_CMP.PRICE_PER_EARNINGS + DBMS_RANDOM.VALUE(-0.2, 0.2)*R_CMP.PRICE_PER_EARNINGS,2),
                            ROUND(R_CMP.DIVIDEND_YIELD + DBMS_RANDOM.VALUE(-0.2, 0.2)*R_CMP.DIVIDEND_YIELD,6),
                            ROUND(R_CMP.EARNINGS_PER_SHARE + DBMS_RANDOM.VALUE(-0.2, 0.2)*R_CMP.EARNINGS_PER_SHARE,2),
                            ROUND(R_CMP.WEEK_LOW_52 + DBMS_RANDOM.VALUE(-0.2, 0.2)*R_CMP.WEEK_LOW_52,2),
                            ROUND(R_CMP.WEEK_HIGH_52 + DBMS_RANDOM.VALUE(-0.2, 0.2)*R_CMP.WEEK_HIGH_52,2),
                            TRUNC(R_CMP.MARKET_CAP + DBMS_RANDOM.VALUE(-0.2, 0.2)*R_CMP.MARKET_CAP),
                            TRUNC(R_CMP.EBITDA + DBMS_RANDOM.VALUE(-0.2, 0.2)*R_CMP.EBITDA),
                            ROUND(R_CMP.PRICE_PER_SALES + DBMS_RANDOM.VALUE(-0.2, 0.2)*R_CMP.PRICE_PER_SALES,6),
                            ROUND(R_CMP.PRICE_PER_BOOK + DBMS_RANDOM.VALUE(-0.2, 0.2)*R_CMP.PRICE_PER_BOOK,2));
        END IF;
        
    END LOOP;
    DBMS_RANDOM.TERMINATE;
END;
